<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Maven详细使用说明</title>
    <link href="/2021/10/26/Maven%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/10/26/Maven%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具。我们从一下几个方面来说说Maven的详细使用：</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>一般使用maven管理的项目，它的默认结构如下：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic">project项目名<br>├── pom.xml项目的描述文件<br>├── src<br>│   ├── main<br>│   │   ├── java存放java的源码<br>│   │   └── resources存放资源文件<br>│   └── test<br>│       ├── java存放测试源码<br>│       └── resources存放测试资源文件<br>└── target存放编译打包生成的文件<br></code></pre></div></td></tr></table></figure><p>pom.xml的结构：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">...</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h3 id="模块化管理"><a href="#模块化管理" class="headerlink" title="模块化管理"></a>模块化管理</h3><h3 id="mvnw"><a href="#mvnw" class="headerlink" title="mvnw"></a>mvnw</h3><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git的详细使用说明</title>
    <link href="/2021/10/20/Git%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/10/20/Git%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<hr><p>git在日常开发的过程中，作为一个分布式版本控制工具，我们有必要了解他的详细使用说明；</p><p>git的安装就不多说了，windows去官网下载安装程序安装即可，mac常用的则是通过homebrew安装brew install git，linux则是apt-get install git；安装后在命令行输入git验证即可；</p><p>以下则为我整理收集的常用的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git init &lt;name&gt;   <br><br>e.g. git init &#x27;gitdemo&#x27; 或者进入gitdemo 直接 git init 也行<br><br>含义：在本地初始化一个空的仓库，目录名为gitdemo<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git add &lt;file&gt;     <br><br>e.g. git add readme.txt  <br><br>含义：将在仓库下新建一个readme.txt文件，添加到仓库；后来commit内容也就是add进去的。注意，可反复多次使用，添加多个文件；<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git commit -m &lt;message&gt;   <br><br>e.g. git commit -m &quot;init and readme.txt&quot;  <br><br>含义：将之前add到仓库的文件提交到本地仓库，其中 -m &lt;message&gt; 意思为给本次提交添加备注信息<br></code></pre></div></td></tr></table></figure><p>为啥 add 和 commit 分开？因为一次 commit 可以 提交很多次 add 的文件；</p><p>add 是把文件提交到暂存区，没add之前的则是工作区，commit则是提交到对应分支仓库；</p><p>正常操作可能每次修改之后必须add 然后再commit；</p><p>其实在IDEA编辑器里通用的显示则是没有 add 的文件显示 红色， add的显示 绿色 ，commit之后 显示白色，修改commit过的文件还没 commit 则显示 蓝色</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git status<br><br>e.g.<br>gitdemo/ (master✗) $ git status                                                                    <br>On branch master<br>nothing added to commit but untracked files present (use &quot;git add&quot; to track)<br>gitdemo/ (master✗) $ vim readme.txt                                                           <br>gitdemo/ (master✗) $ git status                                                                    <br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   readme.txt<br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br><br>含义：可以查看当前仓库的更改状态，第一次 git status 发现没有什么改变。经过 vim 修改 readme.txt之后，再次 git status 则可以发现 modified:   readme.txt 是经过修改的；<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git diff &lt;file&gt;<br><br>e.g.<br>git diff readme.txt<br><br>diff --git a/readme.txt b/readme.txt<br>index 9cc39d9..f33b9f4 100644<br>--- a/readme.txt<br>+++ b/readme.txt<br>@@ -1 +1,2 @@<br>-git <br>+git<br>+first update <br>(END)<br>按 q/Q 可以退出；<br><br>含义：git diff 这个命令可查看具体的修改内容；比如这里显示的是添加了 first update 这段话；<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git log<br>git log --pretty=oneline  这个可以让信息输出在一行<br><br>e.g.<br>git log<br>commit 81c90109460e517650437755b9eb64ca2bbf179a (HEAD -&gt; master)<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 10:22:43 2021 +0800<br><br>    second update<br><br>commit 539a6470e2f1b6bafb215632be0fa61e71615fc2<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 10:03:35 2021 +0800<br><br>    first update<br><br>commit 6a7e49a0fca8032e4bc037aa18e95faa950cb035<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Wed Oct 20 19:32:11 2021 +0800<br><br>    init and readme.txt<br><br><br>git log --pretty=oneline<br>81c90109460e517650437755b9eb64ca2bbf179a (HEAD -&gt; master) second update<br>539a6470e2f1b6bafb215632be0fa61e71615fc2 first update<br>6a7e49a0fca8032e4bc037aa18e95faa950cb035 init and readme.txt<br><br>含义：我们在开发的过程中会不断的add and commit，如果我们想看提交的历史记录，则可以使用 git log 这个命令。<br>这种 hash 值就是commitid 也就是版本号<br></code></pre></div></td></tr></table></figure><p>在开发中，我们可能因为某种原因需要版本会退，那么配合 git log 查看 commitid ： </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git reset --hard HEAD<br><br>e.g.<br>git reset --hard HEAD^<br>HEAD is now at 539a647 first update<br><br>git log <br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 10:03:35 2021 +0800<br><br>    first update<br><br>commit 6a7e49a0fca8032e4bc037aa18e95faa950cb035<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Wed Oct 20 19:32:11 2021 +0800<br><br>    init and readme.txt<br><br>含义：通过 git reset --hard HEAD 可以把当前仓库还原成当前版本；<br>注意 HEAD 指的是当前最近一次提交的版本，HEAD^ 指的是上一个版本，HEAD^^ 指的是上俩个版本；<br>上100个版本 则可以写成 HEAD~100 ，<br>上面示例中我们通过 git reset --hard HEAD^ 将 版本还原到上一个版本，<br>通过 git log 可以看到 已经少了 second update commit的记录<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git reset --hard commitid<br><br>e.g.<br>git reset --hard 81c90109460e517650437755b9eb64ca2bbf179a<br>HEAD is now at 81c9010 second update<br><br>git log<br>commit 81c90109460e517650437755b9eb64ca2bbf179a (HEAD -&gt; master)<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 10:22:43 2021 +0800<br><br>    second update<br><br>commit 539a6470e2f1b6bafb215632be0fa61e71615fc2<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 10:03:35 2021 +0800<br><br>    first update<br><br>commit 6a7e49a0fca8032e4bc037aa18e95faa950cb035<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Wed Oct 20 19:32:11 2021 +0800<br><br>    init and readme.txt<br><br>含义：在上面通过 HEAD^ 已经将版本还原了，只要窗口还没关，我们还能找到 second update 这个commitid <br>通过 git reset --hard commitid 又可以还原到 second update 这个版本；<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git reflog<br><br>e.g.<br>git reflog<br>81c9010 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 81c90109460e517650437755b9eb64ca2bbf179a<br>539a647 HEAD@&#123;1&#125;: reset: moving to HEAD^<br>81c9010 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: second update<br>539a647 HEAD@&#123;3&#125;: commit: first update<br>6a7e49a HEAD@&#123;4&#125;: commit (initial): init and readme.txt<br>(END)<br><br>含义：查看命令历史，以便确定要回到未来的哪个版本<br></code></pre></div></td></tr></table></figure><p>工作中可能我们在工作区中书写了一些错误的内容，我们需要纠正它，通常我们可以手动删除他们，然后提交就行了，git给我提供了一种方式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git checkout -- &lt;file&gt;<br><br>e.g.<br>vim readme.txt<br>添加了woshinibaba<br><br>git status <br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   readme.txt<br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br><br>git diff readme.txt<br>diff --git a/readme.txt b/readme.txt<br>index d601bdd..cfe876e 100644<br>--- a/readme.txt<br>+++ b/readme.txt<br>@@ -1,3 +1,4 @@<br> git<br> first update<br> second update<br>+woshinibaba<br>(END)<br><br>git checkout -- readme.txt<br><br>git status                                                                   <br>On branch master<br>nothing added to commit but untracked files present (use &quot;git add&quot; to track)<br><br>git diff readme.txt<br><br>含义：首先我们在readme.txt文件中书写了部分内容，后来发现不合适，我们通过 git status 发现 readme.txt 文件修改了，<br>通过 git diff readme.txt 我们发现 我们+woshinibaba 的内容，经过 git checkout -- readme.txt 后发现，刚更<br>改的内容还原了。<br></code></pre></div></td></tr></table></figure><p>如果我们已经 上述的 错误内容修改已经add了，那么我们可以通过：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git reset HEAD &lt;file&gt;<br><br>e.g.<br>vim readme.txt<br>添加了woshinibaba<br><br>git add readme.txt<br><br>git status                                                                  <br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>modified:   readme.txt<br><br>git reset HEAD readme.txt<br>Unstaged changes after reset:<br>Mreadme.txt<br><br>git diff readme.txt<br>diff --git a/readme.txt b/readme.txt<br>index d601bdd..cfe876e 100644<br>--- a/readme.txt<br>+++ b/readme.txt<br>@@ -1,3 +1,4 @@<br> git<br> first update<br> second update<br>+woshinibaba<br>(END)<br><br>git checkout -- readme.txt<br><br>git status                                                                   <br>On branch master<br>nothing added to commit but untracked files present (use &quot;git add&quot; to track)<br><br>git diff readme.txt<br><br> <br>含义：我们可以通过git reset HEAD &lt;file&gt;把 暂存区的修改撤销掉（unstage），重新放回工作区：<br>之后通过git checkout -- readme.txt 可以撤销工作区内容<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git rm &lt;file&gt;<br>git rm -f &lt;file&gt;<br><br>e.g.<br>git rm readme1.txt                                                          <br>error: the following file has changes staged in the index:<br>    readme1.txt<br>(use --cached to keep the file, or -f to force removal)<br><br>git rm -f readme1.txt                                                       <br>rm &#x27;readme1.txt&#x27;<br><br>含义：我们可以通过 git rm &lt;file&gt; 来删除文件，当文件已经被 add 过，我们可以使用 git rm -f readme1.txt 来删除；<br></code></pre></div></td></tr></table></figure><p>上述讲的其实是git的其中一种特性，它是一个分布式版本管理工具。</p><p>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p>那么接下来我们讲讲“中央服务器仓库”：</p><p>一般我们可以使用github,gitlab,或者自建git服务器当作中央服务器。相关创建远程仓库这里就不一一细说；</p><p>比如我在gitee上创建一个gitdemo的仓库，目前它还是一个空仓库。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">http协议： git remote add origin https://gitee.com/vision2best/gitdemo.git<br><br>ssh协议：  git remote add origin git@gitee.com:vision2best/gitdemo.git<br><br>git push -u origin master  <br><br>含义：使用对应的协议链接将本地仓库和远程仓库进行关联，关联一个远程库时必须给远程库指定一个名字，`origin`是默认习惯命名； 之后通过 git push -u origin master 将本地仓库推送到远程仓库；<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，<br>还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br></code></pre></div></td></tr></table></figure><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用git remote rm <name>命令。使用前，建议先用git remote -v查看远程库信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git remote -v<br><br>git remote rm &lt;name&gt;<br><br>e.g.<br>git remote -v                                                               <br>origingit@gitee.com:vision2best/gitdemo.git (fetch)<br>origingit@gitee.com:vision2best/gitdemo.git (push)<br><br>git remote rm origin  <br><br>git remote -v <br><br>含义：先用git remote -v 查看远程库信息，之后 rm 掉远程库；<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone git@gitee.com:vision2best/gitdemo.git<br> <br>含义：从远程仓库克隆一个仓库到本地；后面的地址可以是https的也可以是ssh的;<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git checkout -b dev<br>等同于<br>git branch dev &amp; git checkout dev<br>也等同于<br>git switch -c dev<br><br>切换分支<br>git checkout dev 等于 git switch master<br><br><br>含义：创建一个dev分支，并却换到dev分支；<br><br>git branch<br><br>含义：查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号。<br></code></pre></div></td></tr></table></figure><p>我们在dev分支上对readme.txt 做出修改增加一行”dev update”；之后切换到master分支：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git merge dev   <br><br>git merge --no-ff -m &quot;merge with no-ff&quot; dev<br><br>e.g.<br>Updating 81c9010..7230667<br>Fast-forward<br> readme.txt | 1 +<br> 1 file changed, 1 insertion(+)<br><br>含义：可以将 dev 分支上的改动 merge 到master上；<br>也可以加上 --no-ff 表示 不使用 Fast forward 模式； -m 代表 合并之后创建一次新的提交；<br><br></code></pre></div></td></tr></table></figure><p>合并分支后，可以删除dev分支:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git branch -d dev<br><br>e.g.<br>git branch -d dev                                                           <br>Deleted branch dev (was 7230667).<br><br>含义：删除dev分支；<br></code></pre></div></td></tr></table></figure><p>可能在日常工作，我们会出现多个问题同时解决的问题，但是我们一个问题未解决完，又不能提交上去。那么可以：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git stash<br>e.g.<br>git stash<br>Saved working directory and index state WIP on master: 7230667 dev update<br>含义：可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：当使用 git stash 后 git status 会发现工作空间没有变更的了<br><br>git stash list<br>e.g.<br>git stash list<br>stash@&#123;0&#125;: WIP on master: 7230667 dev update<br>含义：查看stash列表；<br><br>git stash apply &lt;stash@&#123;0&#125;&gt;<br>git stash drop &lt;stash@&#123;0&#125;&gt;<br>含义：恢复刚才的stash，但stash内容不删除 ,使用drop进行删除<br><br>git stash pop &lt;stash@&#123;0&#125;&gt;<br>含义：恢复刚才的stash，同时删除stash内容<br><br>git cherry-pick &lt;commit&gt;<br>含义：在master分支上修复的bug，想要合并到当前dev分支，可以用 git cherry-pick &lt;commit&gt; 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git tag &lt;tagname&gt;<br>含义：可以打一个名字为name的新标签：<br><br><br>git tag &lt;tagname&gt; &lt;commit&gt;<br>含义：对commit id是f52c633，打上tag；<br><br>git tag<br>e.g.<br>git tag<br>v0.1<br>(END)<br>含义：查看所有标签；<br><br>git show &lt;tagname&gt;<br>e.g.<br>commit 72306671de3a81d15170adf009f6e8c0b698649f (HEAD -&gt; master, tag: v0.1)<br>Author: 张璜 &lt;zhuang@servyou.com.cn&gt;<br>Date:   Thu Oct 21 13:10:57 2021 +0800<br><br>    dev update<br><br>diff --git a/readme.txt b/readme.txt<br>index d601bdd..b5f7955 100644<br>--- a/readme.txt<br>+++ b/readme.txt<br>@@ -1,3 +1,4 @@<br> git<br> first update<br> second update<br>+dev update<br>(END)<br>含义：查看标签信息<br><br>git rebase<br>含义：rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。<br><br>git pull<br>含义：从远程仓库更新到本地仓库；<br></code></pre></div></td></tr></table></figure><p>附上git本地生成ssh key操作：</p><blockquote><p><em>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</em></p><p><em><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></em></p><p><em>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</em></p><p><em>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</em></p><p><em>之后可以在对应的Github 或者 Gitee 上添加Add SSH Key；在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容既可。</em></p></blockquote><p>Git 全局设置:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global user.name &quot;vision2best&quot;<br>git config --global user.email &quot;vlsion@126.com&quot;<br></code></pre></div></td></tr></table></figure><p>一般在创建远程仓库时会有相应的同步操作指导。</p><p>以上内容参照廖雪峰老师<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>整理；如有误，请指正！</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于设计模式的样例</title>
    <link href="/2021/10/19/%E5%85%B3%E4%BA%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A0%B7%E4%BE%8B/"/>
    <url>/2021/10/19/%E5%85%B3%E4%BA%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A0%B7%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>在阅读大话设计模式的时候，按照其中的场景，编写了对应的设计模式（java版本），</p><p>仓库放在<a href="https://gitee.com/vision2best/design-pattern.git">Gitee</a>上。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大话设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo系列（1）</title>
    <link href="/2021/10/19/Dubbo%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/"/>
    <url>/2021/10/19/Dubbo%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>dubbo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2021/09/28/Hexo/"/>
    <url>/2021/09/28/Hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
